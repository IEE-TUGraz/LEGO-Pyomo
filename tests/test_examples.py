import os
import shutil

import pytest
from openpyxl import load_workbook

from CompareModels import compareModels, ModelTypeForComparison
from InOutModule.printer import Printer

printer = Printer.getInstance()


def test_comparisonAgainstGAMS(tmp_path):
    """
    Compares the GAMS file in the archive against the MPS file generated by LEGO.
    :param tmp_path: Temporary path for the test (provided by pytest)
    :return: None
    """
    warnings.warn("This test is not active, since GAMS can currently not be executed with the new input files.")  # TODO
    # mps_equal = compareModels(ModelTypeForComparison.DETERMINISTIC, "data/example", True,
    #                          ModelTypeForComparison.GAMS, "data/example", True)

    # assert mps_equal


mps_compare_combinations = [
    ("data/example", ModelTypeForComparison.DETERMINISTIC, f"data/mps-archive/example-d36490e1746b919fde87c68515303e30e9881305.mps"),
    ("data/exampleStochastic", ModelTypeForComparison.EXTENSIVE_FORM, f"data/mps-archive/exampleStochastic-ExtensiveForm-bb1583fd2cf295e8cadc6b303c385788bf118818.mps"),
]


@pytest.mark.parametrize("folder_path, model_type, comparison_mps", mps_compare_combinations)
def test_comparisonAgainstMPS(tmp_path, folder_path, model_type, comparison_mps):
    """
    Compares the MPS file in the archive against the MPS file generated by LEGO.
    :param tmp_path: Temporary path for the test (provided by pytest)
    :return: None
    """
    mps_equal = compareModels(model_type, folder_path, True,
                              ModelTypeForComparison.MPS_FILE, comparison_mps, False)

    assert mps_equal


def test_documentationMPSArchive():
    """
    Checks if all MPS files in the archive have a description and if all descriptions are found in the archive.
    :return: None
    """
    descriptionMissing = []

    # Get all descriptions of MPS files
    with open("data/mps-archive/mps-file-descriptions.txt", "r") as description_file:
        lines = [line.rstrip() for line in description_file]
        entries = {}
        for line in lines:
            if line.startswith("#") or not line.strip():
                continue  # Skip comment lines and empty lines
            split = line.split(" ", 1)
            entries[split[0]] = split[1]
    printer.information(f"Found {len(entries)} MPS file descriptions in 'data/mps-archive/mps-file-descriptions.txt'")

    # Check if all MPS files in the archive have a description
    counter_correct = 0
    for mpsFile in os.listdir("data/mps-archive"):
        if mpsFile.endswith(".mps"):
            if mpsFile not in entries:
                descriptionMissing.append(mpsFile)
            else:
                del entries[mpsFile]
                counter_correct += 1
        elif mpsFile == "mps-file-descriptions.txt":
            continue  # Skip the description file itself
        else:
            printer.information(f"Skipping non-MPS file '{mpsFile}'")
    printer.information(f"Found {counter_correct} MPS files with a description in the archive")

    if len(descriptionMissing) > 0:
        printer.error(f"Description(s) missing for {len(descriptionMissing)} MPS file(s): {descriptionMissing}")

    if len(entries) > 0:
        printer.error(f"Description(s) found for {len(entries)} missing MPS file(s): {[names for names in entries.keys()]}")

    assert (not len(descriptionMissing)) and (not len(entries)), "Some MPS files in the archive are missing a description and some descriptions are not found in the archive. Please check the log output for details."
    assert not len(descriptionMissing), "Some MPS files in the archive are missing a description. Please check the log output for details."
    assert not len(entries), "Some descriptions are not found in the archive. Please check the log output for details."
